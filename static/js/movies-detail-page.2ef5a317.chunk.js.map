{"version":3,"file":"static/js/movies-detail-page.2ef5a317.chunk.js","mappings":"sSAAMA,EAAM,mCACNC,EAAW,+BAAjB,SAEgBC,IAAAA,OAAAA,EAAAA,MAAAA,KAAAA,WAAAA,SAAAA,IAAf,OAAeA,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAf,2GAAsCC,EAAtC,+BAA4C,GAAIC,EAAhD,+BAAyD,GAAzD,SACwBC,MAAMF,EAAKC,GADnC,YACOE,EADP,QAEiBC,GAFjB,iCAGWD,EAASE,OAHpB,gDAIKC,QAAQC,OAAO,IAAIC,MAAM,cAJ9B,2GAOM,SAASC,IACd,OAAOV,EAAuB,GAAD,OAAID,EAAJ,uCAA2CD,IAGlE,SAASa,EAAkBC,GACjC,OAAOZ,EAAuB,GAAD,OAAID,EAAJ,iCAAqCD,EAArC,iCAAiEc,EAAjE,gCAGxB,SAASC,EAAeC,GAC7B,OAAOd,EAAuB,GAAD,OAAID,EAAJ,kBAAsBe,EAAtB,oBAAyChB,EAAzC,oBAGxB,SAASiB,EAAmBD,GACjC,OAAOd,EAAuB,GAAD,OAAID,EAAJ,kBAAsBe,EAAtB,4BAAiDhB,EAAjD,oBAGxB,SAASkB,EAAsBF,GACpC,OAAOd,EAAuB,GAAD,OAAID,EAAJ,kBAAsBe,EAAtB,4BAAiDhB,EAAjD,6B,kHC1B/B,EAA6B,qCAA7B,EAAsF,4CAAtF,EAAuJ,6CAAvJ,EAAoN,wC,SCO9MmB,GAAOC,EAAAA,EAAAA,OAAK,kBAAK,+BAEhBC,GAAUD,EAAAA,EAAAA,OAAK,kBAAK,gCAGZ,SAASE,IACpB,OAA0BC,EAAAA,EAAAA,UAAS,IAAnC,eAAOC,EAAP,KAAcC,EAAd,KACQC,GAAaC,EAAAA,EAAAA,MAAbD,SACFE,GAAWC,EAAAA,EAAAA,MACbC,EAAU,KAWd,OARCC,EAAAA,EAAAA,YAAU,WACPC,EAAAA,GAA8BN,GAAUO,KAAKR,KAC5C,CAACC,IAGFI,EADgB,OAAnBF,EAASM,MACI,IACH,wBAAoBN,EAASM,QAEhC,4BACJ,0BACA,SAAC,KAAD,CAAMC,GAAIL,EACVI,MAAON,EAASM,MADhB,UAEA,mBACIE,KAAK,SACLC,UAAWC,EAFf,yBAOEd,IAAU,iCAAE,iBAAKa,UAAWC,EAAhB,WAEd,gBAAKC,IAAG,yCAAoCf,EAAMgB,aAAeC,IAAI,GAAGC,OAAO,WAC/E,iBAAKL,UAAWC,EAAhB,WACA,0BAAKd,EAAMmB,MAAX,eAAuBnB,EAAMoB,aAAaC,MAAM,EAAG,GAAnD,SACA,sCACI,yBAAIrB,EAAMsB,SAAV,QACJ,qCACI,wBACCtB,EAAMuB,OAAOC,KAAI,SAAAC,GAAK,OAAK,wBAAoBA,EAAMC,MAAjBD,EAAME,gBAI/C,iBACAd,UAAWC,EADX,WAEI,mDACA,2BACG,yBACC,SAAC,KAAD,CACIH,GAAG,OACHE,WAAS,EAFb,qBAID,yBACC,SAAC,KAAD,CAASF,GAAG,UAAZ,8BAKV,SAAC,EAAAiB,SAAD,CAAUC,UAAU,oCAApB,UACA,UAAC,KAAD,YACM,SAAC,KAAD,CACIC,KAAK,QACLC,SAAS,SAACpC,EAAD,CACLH,QAASQ,EAAM2B,QAGvB,SAAC,KAAD,CACIG,KAAK,WACLC,SAAS,SAAClC,EAAD,CACLL,QAASQ,EAAM2B","sources":["services/API.jsx","webpack://react-homework-template/./src/views/MovieDetailsPage/MovieDetailsPage.module.css?8c08","views/MovieDetailsPage/MovieDetailsPage.jsx"],"sourcesContent":["const KEY = \"a6c2206a8d028e6d1935f3b46ada483d\";\nconst BASE_URL = 'https://api.themoviedb.org/3'; \n\n async function fetchWithErrorHandling(url = '', config = {}) {\n  const response = await fetch(url, config);\n  return response.ok\n    ? await response.json()\n    : Promise.reject(new Error('Not found'));\n} \n\nexport function fetchTrendingMovies() {\n  return fetchWithErrorHandling(`${BASE_URL}/trending/movie/day?api_key=${KEY}`);\n}\n\n export function fetchMoviesSearch(searchName) {\n  return fetchWithErrorHandling(`${BASE_URL}/search/movie?api_key=${KEY}&language=en-US&query=${searchName}&page=1&include_adult=false`);\n}\n\nexport function fetchMovieById(movieId) {\n  return fetchWithErrorHandling(`${BASE_URL}/movie/${movieId}?api_key=${KEY}&language=en-US`); \n}\n\nexport function fetchMovieCastById(movieId) {\n  return fetchWithErrorHandling(`${BASE_URL}/movie/${movieId}/credits?api_key=${KEY}&language=en-US`); \n}\n\nexport function fetchMovieReviewsById(movieId) {\n  return fetchWithErrorHandling(`${BASE_URL}/movie/${movieId}/reviews?api_key=${KEY}&language=en-US&page=1`); \n}\n","// extracted by mini-css-extract-plugin\nexport default {\"backButton\":\"MovieDetailsPage_backButton__m-lMg\",\"movieDetails__box\":\"MovieDetailsPage_movieDetails__box__Hf4jP\",\"movieDetails__info\":\"MovieDetailsPage_movieDetails__info__lbhRs\",\"addInform_box\":\"MovieDetailsPage_addInform_box__7+2Pq\"};","import { Route, Routes, useLocation, Link } from 'react-router-dom';\nimport { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { NavLink } from 'react-router-dom';\nimport * as moviesShelfAPI from '../../services/API';\nimport { lazy, Suspense } from 'react';\nimport css from '../MovieDetailsPage/MovieDetailsPage.module.css'\n\nconst Cast = lazy(()=> import('../Cast'\n /* webpackChunkName: \"cast-page\" */))\n const Reviews = lazy(()=> import('../Reviews'\n /* webpackChunkName: \"reviews-page\" */))\n\nexport default function MovieDetailsPage (){\n    const [movie, setMovie] = useState(\"\")\n    const { moviesId } = useParams();\n    const location = useLocation();\n    let wayBack = null;\n  \n\n     useEffect(() => {\n        moviesShelfAPI.fetchMovieById(moviesId).then(setMovie);        \n      }, [moviesId]); \n\n     location.state === null ?\n        wayBack = '/' :   \n        wayBack = `/movies?query=${location.state}`\n \n    return (<div>\n        <div>\n        <Link to={wayBack} \n        state={location.state}>\n        <button \n            type=\"button\"\n            className={css.backButton}>\n                Go back\n            </button>\n        </Link>\n        </div>\n         {movie && (<><div className={css.movieDetails__box}>\n             \n        <img src={`https://image.tmdb.org/t/p/w500${movie.poster_path}`} alt='' height='320px'/> \n        <div className={css.movieDetails__info}>\n        <h2>{movie.title} {`(${movie.release_date.slice(0, 4)})`}</h2>\n        <h3>Overview</h3>\n            <p>{movie.overview} </p>\n        <h3>Generes</h3>\n            <ul>\n            {movie.genres.map(genre => (<li key={genre.id}>{genre.name}</li>))}\n            </ul>\n        </div>\n         </div>\n        <div\n        className={css.addInform_box}>\n            <p>Additional information</p>\n            <ul>\n               <li>\n                <NavLink \n                    to='cast'\n                    className>Cast</NavLink>\n               </li> \n               <li>\n                <NavLink to='reviews'>Reviews</NavLink>\n               </li>\n            </ul>\n        </div>\n\n      <Suspense fallback={<h1>Loading</h1>}>\n      <Routes>\n            <Route \n                path=\"/cast\" \n                element={<Cast \n                    movieId={movie.id}/>}> \n            </Route>  \n\n            <Route \n                path=\"/reviews\" \n                element={<Reviews \n                    movieId={movie.id}/>}> \n            </Route>  \n       </Routes>\n      </Suspense>\n        </>)}       \n        </div>)\n}"],"names":["KEY","BASE_URL","fetchWithErrorHandling","url","config","fetch","response","ok","json","Promise","reject","Error","fetchTrendingMovies","fetchMoviesSearch","searchName","fetchMovieById","movieId","fetchMovieCastById","fetchMovieReviewsById","Cast","lazy","Reviews","MovieDetailsPage","useState","movie","setMovie","moviesId","useParams","location","useLocation","wayBack","useEffect","moviesShelfAPI","then","state","to","type","className","css","src","poster_path","alt","height","title","release_date","slice","overview","genres","map","genre","name","id","Suspense","fallback","path","element"],"sourceRoot":""}